// Test definitions. Do NOT edit this file!

#include <tuple>

#define CATCH_CONFIG_MAIN // defines main() automatically
#include "catch.hpp"

#include "lab02.hpp" // student implementations
std::ostringstream out;

// =====================
// tests for exercise 1
// ---------------------

TEST_CASE("Ex00_a", "[example]")
{
    REQUIRE(add(1,1) == 2);
}

// =====================
// tests for exercise 2
// ---------------------

TEST_CASE("Ex00_b", "[example]")
{
    REQUIRE(mul(3,3) == 9);
}

std::string TestCase1 () {
   int a[7]{ 1, 3, 5, 4, 2, 7, -1 };
   int *p = nullptr;

   p = &a[2];
   out << "x = " << a[2] << ", *y = " << *p << endl;
   *p = *p + a[4];
   out << "x = " << a[2] << ", *y = " << *p << endl;
   *p = *p - a[4];
   *p = *p + a[5];
   out << "x = " << a[2] << ", *y = " << *p << endl;

   return out.str();
}

TEST_CASE("Ex01", "[exercise]") {

//    REQUIRE("*p = 5 (), a[2] = 5\np[3] = 9, a[5] = 9\n" == TestCase());
   REQUIRE(ex1() == TestCase1());
}



std::string TestCase2 () {    
   return "16 8\nHello. I am Spider Man. I am a hero.\nHello. I am The Joker. I am a villain.\nHello. I am Doctor Octopus. I am a villain.\nHello. I am Thor. I am a hero.\nHello. I am Batman. I am a hero.\nHello. I am Loki. I am a villain.\n";
}

TEST_CASE("Ex02", "exercise") {

   REQUIRE(ex2() == TestCase2());
}